// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231219050708_Init4")]
    partial class Init4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DB.Entities.Marka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonAdderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonAdderId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("DB.Entities.ModelSamochodu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MarkaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonAdderId")
                        .HasColumnType("int");

                    b.Property<int>("WersjaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarkaId");

                    b.HasIndex("PersonAdderId");

                    b.HasIndex("WersjaId");

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("DB.Entities.Paliwo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Fuel");
                });

            modelBuilder.Entity("DB.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("rodzajUzytkownika")
                        .HasColumnType("int");

                    b.Property<string>("trustString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("rodzajUzytkownika");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DB.Entities.RodzajeUslug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isVisible")
                        .HasColumnType("bit");

                    b.Property<int>("personId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("personId");

                    b.ToTable("ServicesTypes");
                });

            modelBuilder.Entity("DB.Entities.Samochod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ModelSamochoduId")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<int>("WlascicielId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("nr_rejestracyjny")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<decimal>("pojemnoscSkokowa")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<long>("przebieg")
                        .HasMaxLength(5000)
                        .HasColumnType("bigint");

                    b.Property<int>("rodzajPaliwaId")
                        .HasColumnType("int");

                    b.Property<int>("rokProdukcji")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModelSamochoduId");

                    b.HasIndex("WlascicielId");

                    b.HasIndex("rodzajPaliwaId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("DB.Entities.StatusyZlecen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorksStatus");
                });

            modelBuilder.Entity("DB.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("DB.Entities.Usluga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7, 2)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DB.Entities.WersjeNadwozia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonAdderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonAdderId");

                    b.ToTable("CarModelType");
                });

            modelBuilder.Entity("DB.Entities.Wpis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("UslugaId")
                        .HasColumnType("int");

                    b.Property<int>("ZlecenieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dataDodania")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<long>("ilosc")
                        .HasColumnType("bigint");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("UslugaId");

                    b.HasIndex("ZlecenieId");

                    b.ToTable("WordAdnotation");
                });

            modelBuilder.Entity("DB.Entities.Zlecenie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OpisZdarzenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonWorkerId")
                        .HasColumnType("int");

                    b.Property<int>("SamochodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dataPrzekazaniaPojazdu")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dataWplyniecia")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int>("rodzajUslugiId")
                        .HasColumnType("int");

                    b.Property<int>("statusZleceniaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonWorkerId");

                    b.HasIndex("SamochodId");

                    b.HasIndex("rodzajUslugiId");

                    b.HasIndex("statusZleceniaId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("DB.Entities.Marka", b =>
                {
                    b.HasOne("DB.Entities.Person", "Person")
                        .WithMany("marki")
                        .HasForeignKey("PersonAdderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DB.Entities.ModelSamochodu", b =>
                {
                    b.HasOne("DB.Entities.Marka", "marka")
                        .WithMany("modeleSamochodu")
                        .HasForeignKey("MarkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Entities.Person", "persons")
                        .WithMany("modeleSamochodu")
                        .HasForeignKey("PersonAdderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Entities.WersjeNadwozia", "wersjeNadwozia")
                        .WithMany("modeleSamochodu")
                        .HasForeignKey("WersjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("marka");

                    b.Navigation("persons");

                    b.Navigation("wersjeNadwozia");
                });

            modelBuilder.Entity("DB.Entities.Person", b =>
                {
                    b.HasOne("DB.Entities.UserType", "UserType")
                        .WithMany("Persons")
                        .HasForeignKey("rodzajUzytkownika")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("DB.Entities.RodzajeUslug", b =>
                {
                    b.HasOne("DB.Entities.Person", "person")
                        .WithMany("rodzajeUslug")
                        .HasForeignKey("personId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("person");
                });

            modelBuilder.Entity("DB.Entities.Samochod", b =>
                {
                    b.HasOne("DB.Entities.ModelSamochodu", "ModelSamochodu")
                        .WithMany("Samochody")
                        .HasForeignKey("ModelSamochoduId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Entities.Person", "persons")
                        .WithMany("samochody")
                        .HasForeignKey("WlascicielId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Entities.Paliwo", "rodzajPaliwa")
                        .WithMany("Samochody")
                        .HasForeignKey("rodzajPaliwaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelSamochodu");

                    b.Navigation("persons");

                    b.Navigation("rodzajPaliwa");
                });

            modelBuilder.Entity("DB.Entities.WersjeNadwozia", b =>
                {
                    b.HasOne("DB.Entities.Person", "Person")
                        .WithMany("wersjeNadwozia")
                        .HasForeignKey("PersonAdderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DB.Entities.Wpis", b =>
                {
                    b.HasOne("DB.Entities.Person", "Person")
                        .WithMany("wpisy")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Entities.Usluga", "usluga")
                        .WithMany("wpisy")
                        .HasForeignKey("UslugaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Entities.Zlecenie", "Zlecenie")
                        .WithMany("wpisy")
                        .HasForeignKey("ZlecenieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Zlecenie");

                    b.Navigation("usluga");
                });

            modelBuilder.Entity("DB.Entities.Zlecenie", b =>
                {
                    b.HasOne("DB.Entities.Person", "Person")
                        .WithMany("zlecenia")
                        .HasForeignKey("PersonWorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Entities.Samochod", "Samochod")
                        .WithMany("zlecenia")
                        .HasForeignKey("SamochodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Entities.RodzajeUslug", "rodzajUslug")
                        .WithMany("zlecenia")
                        .HasForeignKey("rodzajUslugiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Entities.StatusyZlecen", "statusZlecenia")
                        .WithMany("zlecenia")
                        .HasForeignKey("statusZleceniaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Samochod");

                    b.Navigation("rodzajUslug");

                    b.Navigation("statusZlecenia");
                });

            modelBuilder.Entity("DB.Entities.Marka", b =>
                {
                    b.Navigation("modeleSamochodu");
                });

            modelBuilder.Entity("DB.Entities.ModelSamochodu", b =>
                {
                    b.Navigation("Samochody");
                });

            modelBuilder.Entity("DB.Entities.Paliwo", b =>
                {
                    b.Navigation("Samochody");
                });

            modelBuilder.Entity("DB.Entities.Person", b =>
                {
                    b.Navigation("marki");

                    b.Navigation("modeleSamochodu");

                    b.Navigation("rodzajeUslug");

                    b.Navigation("samochody");

                    b.Navigation("wersjeNadwozia");

                    b.Navigation("wpisy");

                    b.Navigation("zlecenia");
                });

            modelBuilder.Entity("DB.Entities.RodzajeUslug", b =>
                {
                    b.Navigation("zlecenia");
                });

            modelBuilder.Entity("DB.Entities.Samochod", b =>
                {
                    b.Navigation("zlecenia");
                });

            modelBuilder.Entity("DB.Entities.StatusyZlecen", b =>
                {
                    b.Navigation("zlecenia");
                });

            modelBuilder.Entity("DB.Entities.UserType", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("DB.Entities.Usluga", b =>
                {
                    b.Navigation("wpisy");
                });

            modelBuilder.Entity("DB.Entities.WersjeNadwozia", b =>
                {
                    b.Navigation("modeleSamochodu");
                });

            modelBuilder.Entity("DB.Entities.Zlecenie", b =>
                {
                    b.Navigation("wpisy");
                });
#pragma warning restore 612, 618
        }
    }
}
